import argparse

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data-dir', default='data', help='Data directory path.')
    parser.add_argument('--batch-size', default=16, type=int, help='Batch size.')
    parser.add_argument('--epochs', default=50, type=int, help='Number of epochs for training.')
    parser.add_argument('--device', default='cuda', help='Device: cuda or cpu.')
    parser.add_argument('-v', '--verbose', action='store_true', help='Print more information.')
    parser.add_argument('--test-val', action='store_true')
    parser.add_argument('--num-workers', default=8, help='Number of CPU cores to use for dataloader.')
    parser.add_argument('--output-dir', default='seg_outputs', help='Output dir for sample visualisation.')
    parser.add_argument('--vis-val', action='store_true', help='Visualise validation outputs')
    parser.add_argument('--log-dir', default='logs', help='Path for logging output folder. Default=logs')
    parser.add_argument('--exp', default='sam_sup_pidnet_s', help='Experiment name.')
    parser.add_argument('--weight-dir', default='checkpoints', help='Path to directory for saving model weights.')
    parser.add_argument('--mode', default='test')
    parser.add_argument('-f', '--force', action='store_true', help='Ignore warnings and force execution.')
    parser.add_argument('--debug-val', action='store_true', help='Validation debugging.')
    parser.add_argument('--include-id', action='store_true', help='Include image id in dataloader. Used for debugging and visualisation.')
    parser.add_argument('--manual-masks', action='store_true', help='Use manual mask loader. Used for testing.')
    parser.add_argument('-r', '--resume', action='store_true', help='Resume training from another checkpoint. Currently not supported.')
    parser.add_argument('--eval-sam', action='store_true', help='Option for evaluating SAM generated masks.')
    parser.add_argument('--include-box', action='store_true', help='Include bounding box in dataloader.')
    parser.add_argument('--label-format', default='txt')
    parser.add_argument('--boxsup', action='store_true', help='Unused argument.')
    parser.add_argument('--eval-snake', action='store_true', help='Option for evaluating masks generated by a BoxSnake trained model. Currently not supported in this code.')
    parser.add_argument('--sup-dir', default='sam_masks', help='Pseudo-label directory name for PIDNet training. Default=sam_masks')
    parser.add_argument('--vis-pid', action='store_true', help='Option for generating additional PIDNet output visualisations.')
    parser.add_argument('--eval-dir', default='manual_masks', help='Evaluation directory name used for testing.')
    parser.add_argument('--model-size', default='s', help='PIDNet model size. Options: s, m, l. Default=s')
    parser.add_argument('--single-model', default='', help='Option for evaluating a single model checkpoint.')
    parser.add_argument('--input-image', default='data/images/test/karkkila_DJI_0008_frame48.jpg', help='Input image for visualisation.')

    parser.add_argument(
                "opts",
                help="""
        Modify config options at the end of the command. For Yacs configs, use
        space-separated "PATH.KEY VALUE" pairs.
        For python-based LazyConfig, use "path.key=value".
                """.strip(),
                default=None,
                nargs=argparse.REMAINDER,
            )
    
    args = parser.parse_args()
    return args